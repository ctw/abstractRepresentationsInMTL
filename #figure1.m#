

clearvars -except sessions

if ismac
    secondleveldir = '/Users/treber/projects/ospr/secondlevel/';
    stimdir = '/Users/treber/projects/ospr/stimuli/ospr_set_1/';
    %rawdatadir = '/Volumes/bak/neuralynx/current/';
    %rawdatadir = '/Volumes/bak/neuralynx/2016-02-07T14:38:38/';
    rawdatadir = '/Volumes/Neuralynx/';

else
    secondleveldir = '/home/treber/projects/ospr/secondlevel/';
    stimdir = '/home/treber/projects/ospr/stimuli/ospr_set_1/'; 
    rawdatadir = '/media/Neuralynx/';
end

cd(secondleveldir);

load category_responses
load ospr_colors

if ~exist('sessions', 'var')
    tic
    load sessions
    toc
end


%% some constants
% kernel convolution
kernelwidth = 0.05; %seconds
resolution = 0.001; 
dodensityplot = false;
howmany = 6; % stimuliper cell
catticks = cat_lookup(1:10:end);
catticks = cellfun(@(x) strrep(x, '_', ' '), catticks, 'UniformOutput', false);

%% make a selection of the units we want in the figure
w.chan = [47        28        10        50       47];
w.clus = [3         4         1         4        2];
w.sess = {'044e05'  '040e04', '033e06', '034e14' '030e16'};
%where to put the density plot (left or right)
w.dpp  = {'r'       'r'       'l'       'l'      'r'};


exs = [3 4 5]; % which of the above units do we want to plot
w.chan = w.chan(exs);
w.clus = w.clus(exs);
w.sess = w.sess(exs);
w.dpp  = w.dpp(exs);

%% setup anntoations
annot = ['ABCDEFGHIKLMOPQRSTUVWXYZ'];
pbi = 0;
rasterids = [numel(w.chan)+1:numel(annot)];
ri = 1;
% $$$ annot(rasterids);
% $$$ annot(pbarids)

%% setup sizes
figh = figure('color', 'w', 'visible', 'on');

purpose='manuscript' % a choice of 'poster'or 'manuscript'

if strcmp(purpose, 'manuscript')

    figh.PaperUnits = 'inches';
    figh.PaperPosition = [0 0 7.4 1*length(exs)];
    
    fontSize = 8;
    fontSizeLarge = 10;

elseif strcmp(purpose, 'poster')

    % johannes poseter-template is A3, which transates to 11.7 x
    % 16.5 inches, in two columns
    figh.PaperUnits = 'inches';
    figh.PaperPosition = [0 0 4.5 1*length(exs)];
    
    fontSize = 8;
    fontSizeLarge = 10;

end

gapwidth_h = 10;
gapwidth_v = 17;
sbpos = setup_plot(numel(w.chan)+1, howmany+6, gapwidth_h, ...
                                 gapwidth_v);

% display it somewhat similar to what will be plotted
figh.Position = [200 200  figh.PaperPosition(3)*150 figh.PaperPosition(4)*150];

for wi = 1:numel(w.chan)
    
    %% retrieve indices in sessions
    s = find(strncmp({sessions(:).name}, w.sess{wi},6));
    chan = w.chan(wi); % w channel?
    clusid = w.clus(wi); % w class on channel?
    cherryno = [sessions(s).cherries(:).classno] == clusid & ...
        [sessions(s).cherries(:).channr] == chan;
    
    c = find(cluster_lookup.sessid == s & ...
        cluster_lookup.channo == chan & ...
        cluster_lookup.clusid == clusid);
    h = 1;
    
    disp(cluster_lookup.sitename(c));
    
    
    
    %% do a density plot first
    ts = load(sprintf('%s%s%s%stimes_CSC%d.mat', rawdatadir, filesep, ...
                      sessions(s).name, filesep, chan));
    spidx = ts.cluster_class(:,1) == clusid;
    pos0 = squeeze(sbpos(wi,h,:));
    
    pos0(1) = pos0(1) + pos0(3) * 0.6;
    pos0(3) = pos0(3) * 2.5;
    densax = axes('Position', pos0);
    colorbarhandle = density_plot(ts.spikes, spidx);
    %title(cluster_lookup.sitename(c), 'FontWeight', 'normal');
    
    ylabel(colorbarhandle, '')
    
    if wi == 1
        title(colorbarhandle, 'Density','FontWeight', 'normal')
    else
        
    end
        
    set(densax, 'FontSize', fontSize)
    if wi < numel(w.chan)        
        xlabel('');        
    end
    pbi = pbi + 1;
    add_text_topleft(densax,annot(pbi), +0.04, +0.04, fontSize, 'bold');
    
    h = h + 2;
    %% do a histogramm of log(pvals for each stimulus)
    pos1 = squeeze(sbpos(wi,h,:));
    pos1(3) = pos1(3) * 2.8;
    pos1(1) = pos1(1) + 0.09;
    pvalax = axes('Position', pos1);

    if wi < numel(w.chan)
        ospr_plot_pval_bars(pvals_rs(c,:), [], fontSize, category_colors);
    else
        ospr_plot_pval_bars(pvals_rs(c,:), catticks, fontSize, category_colors);
    end
% $$$     title(sprintf('%s, %s', cluster_lookup.sitename{c}, ...
% $$$                   sessions(s).cherries(cherryno).kind), ...
% $$$           'interpreter', 'none', 'Fontsize', fontSize, 'FontWeight', ...
% $$$           'normal');

    pbi = pbi + 1;
    add_text_topleft(pvalax,annot(pbi), 0.055, 0.04, fontSize, 'bold');
   
    %% sort responses by pval
    [temp stimidx] = sort(pvals_rs(c,:)); 
    for h = 1:howmany
        tidx = strcmp(sessions(s).condition.imagename, ...
                      [stim_lookup{stimidx(h)}, '.jpg']);
        cati = floor(stimidx(h)/10)+1;
        spikes = sessions(s).cherries(cherryno).trial(tidx);
        pos1 = squeeze(sbpos(wi,h+6,:));

        % rasterplot
        ax1 = axes('Position', [pos1(1); (pos1(2) + pos1(4) * 0.3); pos1(3); pos1(4)*0.75]);
        plot_raster(spikes, [-500:1500], [] ,[], 0.8);
        plot([1000 1000], [0 1], ':k');

        if consider_rs(c,stimidx(h)) 
            xlr = xlim;
            ylr = ylim;
            
            rectangle('Position', [xlr(1) ylr(1) diff(xlr) diff(ylr)], ...
                      'EdgeColor', [0.7 0.7 0.7], ...
                      'FaceColor', 'none', ...
                      'LineWidth', .5, ...
                      'Curvature', [0.1 0.1]);
        end
        
% $$$         title(sprintf('p_{rs}=%.2g', ...
% $$$                       pvals(c, stimidx(h))), ...
% $$$                       'FontWeight', 'normal');
        

        if h == 1
            pbi = pbi + 1;
            add_text_topleft(gca,annot(pbi), 0.04, 0.03, fontSize, 'bold');
        end
        
        % ifr           
        ax2 = axes('Position', [pos1(1:3); pos1(4)*0.3]);
        ifrs = convolve_spikes(spikes,-1:resolution:2,kernelwidth, ...
                               resolution); 
        [hdl f ] = plot_signals(ifrs(:,500:2500), [-500:1500], ...
                                [0 0 0]);
        ifrhdls(h) = ax2;
        ylabel(ax2, '')
        xlim(ax2, [-500 1500]);
        yl(h,:) = ylim;
        plot([1000 1000], [-1000 1000], ':k');
        plot([0 0], [-1000 1000], ':k');
        ylim(yl(h,:));
        if h > 1 
            set(ax2, 'YTick', []);
        else
            yt = get(ax2, 'YTick');
            set(ax2,'YTick', [yt(1) yt(end)]);
        end
        
        if wi ==numel(w.chan) && h == 1
            xt = get(ax2,'XTick');
            set(ax2, 'XTick', [0, 1000]);
            ax2.XTickLabelRotation=45;            
            xlabel('ms', 'FontSize', fontSize);
            ylabel('Hz');
        elseif h == 1
            set(ax2, 'XTick', []);
            ylabel('Hz', 'FontSize', fontSize);
        else
            axis off; ;        
        end
        set(ax2, 'FontSize', fontSize)
                
        % stimulus
        ax3 = axes('Position', [pos1(1) + pos1(3) * .75; ...
                            pos1(2)+pos1(4)*.2; pos1(3)*.4; ...
                            pos1(4)*.6]);
        imshow([stimdir, stim_lookup{stimidx(h)}, '.jpg']);
        
    end

    for h = 1:howmany
        ylim(ifrhdls(h), [0 max(yl(:,2))]);
    end
    
end
% $$$ set(findall(gcf,'type','text'),'FontSize',fontSize,'fontWeight','normal');
% $$$ set(findall(0,'type','axes'),'FontSize',fontSize,'fontWeight','normal');
fname = [secondleveldir, 'example_su_responses_' purpose];
print(figh, [fname '.png'],'-dpng','-r600');
print(figh, [fname '.tiff'],'-dtiff','-r600');
print(figh, [fname '.eps'],'-depsc','-r600', '-tiff');

%% trim and save a transparent version 
system(['convert ' fname '.png  -trim -transparent white ' fname '_t.png']);
close(figh)
